<?php

/**
 * Класс AbstractAction - абстрактный класс-прототип для всех классов-action-ов.
 * Action - эффективная часть работы CMS, выполняемая при каждом клиентском запросе. 
 * Любому типу обращения соответствует свой action. Например, это может быть вывод 
 * последних постов блога, вывод одного поста по пермалинку, авторизация пользователя, 
 * редактирование поста и любое другое действие.
 * Выбор небходимого action-а из фиксированного множества выполняется классом 
 * RequestParser, который обрабатывает клиентский HTTP запрос к CMS и преобразет 
 * его к удобной для дальнейшей работы форме - набору параметров запуска выбранного 
 * action-а.
 * Вызов необходимого action-а выполняется объектом класса ActionFabric. При этом 
 * в создаваемый объект action-класса передается набор параметров (результат работы 
 * RequestParser).
 * Результат работы action-а может быть разных типов, которые перечислены ниже. 
 * Тип результата работы определяется при работе action-а и сохраняется в значении 
 * внутренней переменной класса resType. Ниже перечислены возможные типы результата 
 * работы action-а
 *   - html: сгенерировано содержимое HTML-страницаы, представляющее собой ассоциативный 
 *     массив, содержащий множество проименованных фрагментов страницы (например этими 
 *     фрагментами могут быть title, subtitle, text, right_column, categories_list, 
 *     generation_time, etc). В этом случае ядро сгенерирует веб-страницу
 *   - image: сгенерировано графическое изображение (результат представляет собой 
 *     ассоциативный массив, в котором содержится название формата и картинка в виде 
 *     бинарных данных)
 *   - redirect: результат работы - переадресация на определённый URL
 *   - text: результат работы - простой текст. В отличии от веб-страницы, не ассоциативный 
 *     массив фрагментов страницы а обычный кусок текста.
 * Определение типа результата работы класса необходимо для того, чтобы ядро скрипта 
 * необходимым образом выполнило дальнейшую обработку его обработку (работа 
 * с action-ами обезличена). Если результат имеет тип html - он будет отдан на обработку 
 * в парсер темплейтов. Если redirect - будет сгенерирован соответствующий HTTP заголовок, 
 * который перенаправит браузер на нужный адрес, и т.д.
 * Внутри action-а не следует делать никакого вывода. Это возможно только для отладки, 
 * т.к. в любом случае весь текст, выводимый при работе action-а (включая сообщения 
 * парсера PHP) будет перенаправлен ядром в буффер.
 * Основной метод класса - execute. Он запускатеся ядром сразу после конструктора 
 * и проверки параметров методом paramsOk и выполняет всю работу.
 *
 * Последовательность работы ядра CMS с action-ами:
 *   - вызов конструктора AbstractAction, передача в объект параметров
 *   - проверка корректности параметров методом paramsOk
 *   - в случае, если параметры некорректны, вывод сообщения об ошибке из переменной erroMsg
 *     и завершение работы
 *   - вызов метода execute()
 *   - определение типа сгенерированного результата по переменной resType
 *   - обработка сгенерированного результата, сохранённого в переменной resData
 *   - если флагу returnable задано значение true, он сохраняется как реферер (страница, 
 *     на которую можно перейти при обратном редиректе)
 */
class AbstractAction {
	/**
	 * Ассоциативный массив параметров запуска экшена. Значение 
	 * параметров задаётся при вызове конструктора.
	 */
	var $params = array();
	
	/**
	 * После выполнения метода execute(), переменная должна содержать 
	 * значение типа данных, хранимого в переменной $resData
	 */
	var $resType = false;
	/**
	 * Переменная, в которой сохраняется результат работы экшена 
	 * после выполнения метода execute(). Может быть ассоциативным 
	 * массивом или текстовой строкой.
	 */
	var $resData = array();
	
	/**
	 * Имя темплейта, необходимого для оформления данных, выдаваемых action-ом. 
	 * Переменная используется только при генерации HTML страниц (resType == 'html')
	 */
	var $template = false;
	
	/**
	 * При работе с формами и в некоторых других случаях, требуется
	 * перенаправлять клиента на предыдущую страницу. Например, если 
	 * пользователь запросил форму логина со страницы списка тагов, 
	 * то после авторизации он будет перенаправлен именно на страницу тагов.
	 * Для того, чтобы этот механизм правильно работал, системе требуется 
	 * отличать веб-страницы с формами, на которые перенаправлять клиента 
	 * нельзя (бессмысленно), от обычных страниц, на которые перенаправлять 
	 * можно и нужно.
	 * $returnable - это флаг, определяющий необходимость запоминания 
	 * выполняемого экшена ядром, как реферера, то-есть как страницу, на которую 
	 * можно будет перенаправить клиента на следующем цикле работы.
	 * $returnable принимает значения false для всех форм и экшенов, 
	 * выполняющих редирект.
	 */
	var $returnable = false;
	/**
	 * В случае завершения работы методов класса по ошибкам,
	 * переменная должна содержать текстовое описание ошибки для диагностики.
	 */
	var $errorMsg = false;
	
	/**
	 * Прототип метода, реализующего основновные операции, 
	 * выполняемые экшеном
	 */
	function execute() { return true; }
	
	/**
	 * Метод для проверки корректности параметров, задаваемых экшену 
	 * при его создании (через параметры конструктора).
	 * @return bool true/false, в зависимости от корректности параметров.
	 */
	function paramsOk() { return true; }
	
	/**
	 * Конструктор, через параметры которого в создаваемый 
	 * объект передаются параметры запуска экшена и объект для доступа к БД
	 */
	function AbstractAction($_params) { 
		// Сохраняем параметры вызова экшена во внутренних переменных класса
		$this->params = $_params;
	}
	
}

?>