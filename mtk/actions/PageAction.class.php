<?php

/**
 * Генерирует страницу на основе заданногго текстового файла и опционального 
 * файла с PHP кодом.
 * Параметры:
 *   - path - путь к текстовому файлу сс статическим контентом страницы
 *   - vpath - virtual path - составляющая часть запрошенного URL, которой не соответствует 
 *     имя реального текстового файла. Virtual path используется совместно с динамическими 
 *     страницами, для того, чтобы передать в код, генерирующий их контент, те или иные 
 *     параметры (например URL: /image/10, Path: /image, Virtual path: 10, Файл со статическим 
 *     контентом страницы: /image.txt, файл-обработчик vpath: image.vpath.php)
 *
 * Как работает:
 *
 * При генерации страниц можно использовать PHP код. Если существует файл с именем, 
 * аналогичным мени основного файла страницы и расширением .php, он будет загружен автоматически 
 * после загрузки статического контента. 
 * 
 * Если задан параметр vpath, вместо такого php файла будет подключен файл с суффиксом vpath. 
 * При этом, в отличии от первого случая, такое подключение не опционально, а обязательно.
 * .vpath.php файл должен содержать в себе код, обрабатывающий virtual path и, если такой файл 
 * отсутствует, будет выдано сообщение об ошибке.
 *
 * Код в подключаемом PHP файле может обрабатывать статический контент, доступный в виде 
 * ассоциативного массива $SECTIONS. Код страницы может не только изменять 
 * но и добавлять новые секции в этот массив.
 *
 * После того, как массив $SECTIONS создан, все его элементы передаются в парсер темплейтов, 
 * за исключением тех, имена которых начинаются с символа '.'. Такие имена зарезервированы 
 * и воспринимаются как служебные параметры (не относятся к контенту страницы).
 * 
 * Внутри файла со статическим контентом можно задать имя темплейта, который будет использован при 
 * генерации страницы. Для этого необходимо задать нужное значение секции со стандартным именем '.template'.
 * Если темплейт не задан, будет использован темплейт по-молчанию с именем 'page_default'.
 * Всем темплейтам страниц рекомендуется задавать имена в формате page_*, чтобы они не смешивались 
 * с другими темплейттами в теме.
 */
class PageAction extends AbstractAction {
	
	var $returnable = true;
	var $template = 'page_default';
	
	function paramsOk() {
		if(count($this->params) == 2 && isset($this->params['path']) && isset($this->params['vpath'])) {
			return true;
		} else {
			$this->errorMsg = "Bad action params.";
			return false;
		}
	}
	
	function execute() {
		// Считываем статический контент страницы
		$SECTIONS = $this->readPage(DIR_PAGES.$this->params['path'].'.txt');
		$PATH = $this->params['path'];
		$VPATH = $this->params['vpath'];
		// (переменные, выделенные верхним регистром, могут быть использованы 
		// из подключаемых PHP файлов, с одом, специфичным для текущей страницы)
		
		if(strlen($VPATH)) {
			// Если задана виртуальная часть пути, необходимо подключить PHP файл 
			// с обработчиком
			
			$phpFile = DIR_PAGES.$PATH.'.vpath.php';
			if(!file_exists($phpFile)) {
				$errorMsg = DEBUG_MODE?("Virtual path handler file doesn't exists (".$phpFile.")"):'Page not exists';
				$this->resType = 'error';
				$this->resData = array('error_msg' => $errorMsg);
				return;
			}
			
			require $phpFile;
			
		} else {
			// Опциональное подключение PHP файла со специфичным для текущей 
			// страницы кодом (если этот файл существует)
			
			$phpFile = DIR_PAGES.$PATH.'.php';
			if(file_exists($phpFile)) {
				require $phpFile;
			}
			
		}
		
		$this->resType = 'html';
		$this->resData = $SECTIONS;
	}
	
	/**
	 * Считывает файл с данными страницы и возвращает ассоциативный массив 
	 * с его секциями (индекс массива - идентификатор секции). Секции в файлах 
	 * страниц определяются так:
	 *
	 * %%[спецсимвол]<идентификатор секции><контент секции>
	 * опциональный спецсимвол необходим для определения типа секции; идентификатор 
	 * секции не должен содержать пробелов; контент секции может быть любой длины, 
	 * пробельные символы в его начале и конце обрезаются;
	 *
	 * Секции бывают следующих типов:
	 * 1. Спецсимвол - "!": секция, обрабатываемая стандартными текстовыми фильтрами: 
	 * парсером markdown и корректором типографики; 
	 * 2. Спецсимвол - "#" - специальная секция, содержимое которой не предназначено 
	 * для вставки в страницу, а является директивой для парсера. Примером может быть 
	 * опциональный параметр #template, задающий имя темплейта страницы.
	 * 3. Спецсимвол отсутствует - обычная секция, содержимое которой вставляется 
	 * в страницу как есть.
	 * 
	 * @param string $_fn Полный путь к считываемому файлу
	 * @return mixed Ассоциативный массив с обработанным содеримым файла или false, 
	 * в случае ошибки.
	 */
	function readPage($_fn) {
		// Считываем файл со статическим контентом страницы
		$text = file_get_contents($_fn);
		if($text === false) return false;
		
		// Делим текст на секции
		$text = explode("%%", $text);
		array_shift($text);
		
		$ss = array();
		
		// Обрабатываем секции
		foreach($text as $part) {
			$name = trim(strtok($part, " \n\t"));
			$value = trim(substr($part, strlen($name)));
			
			// Секции, для которых не задано имя игнорируются
			if(!$name) continue;
			
			if($name[0] == '!') {
				// Секции, которые не обрабатываются
				$ss[substr($name, 1)] = $value;
			} elseif($name[0] == '#') {
				// Директива, определяющая темплейт страницы
				if($name == '#template')
					$this->template = $value;
			} else {
				$ss[$name] = kavych(Markdown($value));
			}
		}
		
		return $ss;
	}

}

?>